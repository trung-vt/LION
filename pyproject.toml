[build-system]
requires = ["setuptools>=42", "wheel", "setuptools-git-versioning>=2.0,<3"]
build-backend = "setuptools.build_meta:__legacy__"

[tool.setuptools-git-versioning]
count_commits_from_version_file = true
enabled = true
version_file = "src/LION/VERSION"
template = "{tag}{env:LIONVERSIONSUFFIX:''}"
dev_template = "{tag}{env:LIONVERSIONSUFFIX:''}"
dirty_template = "{tag}+dirty{sha}"

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"LION" = ["VERSION"]

[project]
name = "LION"
description = ""
readme = "README.md"
requires-python = ">=3.12, <3.13"  # Python 3.13 and later no longer supports numpy 1.x which is needed for tomosipo
dynamic = ["version"]
dependencies = [
    # IMPORTANT: astra-toolbox needs to be installed with conda first!
    # While astra-tool is available on pip, it is recommended to install it via conda due to better compatibility with CUDA and system libraries.
    # Installing from pip requires the user to explicitly set up the CUDA runtime libraries which makes cross-platform installation more difficult.
    # tomosipo supports numpy 2.x starting from 0.7.0 (not available on conda yet)
    "tomosipo @ git+https://github.com/ahendriksen/tomosipo.git@v0.7.0",  # will include pytorch 2.4.1? But the actual torch installed is the latest 2.9.0
    # Note: in tomosipo's setup.py, the requirements are 'astra-toolbox>=2.0,!=2.3.0', 'numpy>=1.21'
    "ts_algorithms @ git+https://github.com/ahendriksen/ts_algorithms.git",  # release v0.1.0 is missing `nag_ls` so we install the latest version directly from main branch.
    # Note: ts_algorithms doesn't specify any requirements in its setup.py so we need to make sure the dependencies are installed ourselves.
    # The main dependency is tomosipo which in turns depends on astra-toolbox.

    # The followings are currently set to the latest versions (make sure they don't conflict with the above)
    "deepinv",  # for pretrained DRUNet for PnP demo
    "imageio",  # walnuts.py, pre_process_2detecCT.py
    "kornia",   # GaussianDenoiserSolver.py
    "matplotlib",
    "numpy",
    "pandas",   # deteCT.py, pre_process_lidc_idri.py
    "pydicom",  # data_primitives.py
    "scikit-image",
    "scipy",  # pre_process_2deteCT.py, data_loader.py, data_primitives.py, pre_processing.py
    "simpleitk",  # data_primitives.py
    "spyrit",  # Fast Walsh-Hadamard Transform
    "torch",
    "torchdiffeq",  # cLPD.py, cFBPConvNet.py
    "torchvision",  # ct_transforms.py, EquivariantSolver.py
    "tqdm"
]

[project.optional-dependencies]
tests = [
    "coverage",
    "codecov",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
]
docs = [
    "LION[notebooks]",
    "sphinx>=8.1, <8.2",
    "sphinx_rtd_theme>=3.0, <3.1",
    "sphinx-pyproject>=0.3, <0.4",
    "myst-nb>=1.2, <1.3",
    "sphinx-mathjax-offline<0.1",
    "sphinx_github_style>=1.2, <1.3",
    "sphinx-autodoc-typehints>=3, <3.1",
    "sphinx-copybutton>=0.5, <0.6",
    "sphinx-last-updated-by-git>=0.3, <0.4",
]
notebooks = [
    "ipykernel",
    "ipywidgets",
    "jupytext",
    "matplotlib",
    "cmap",
]
others = [
    "zenodo-get",
    "mrpro",
]
dev = ["LION[tests, docs]"]
dev_others = ["LION[tests, docs, notebooks]"]

# PyTest section
[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore:Anomaly Detection has been enabled:UserWarning",                   # torch.autograd
    "ignore:.*In the future, this object will be coerced as if it was first converted using.*:FutureWarning", # numpy 1.2
]
addopts = "-n auto --dist loadfile --maxprocesses=8"
markers = ["cuda : Tests only to be run when cuda device is available"]

# MyPy section
[tool.mypy]
warn_return_any = false
check_untyped_defs = true
warn_no_return = true
warn_unreachable = true
exclude = ["docs"]
enable_error_code = ["ignore-without-code"]
warn_unused_ignores = true


[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "torchvision.*",
    "cmap",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
extend-exclude = ["__init__.py"]
exclude = ["docs/**"]

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "FA",  # flake8-future-annotations
    "I",   # isort
    "N",   # pep8-naming
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "PIE", # flake8-pie
    # "PL",  # PyLint
    "PTH", # flake8-use-pathlib
    "T20", # flake8-print
    "Q",   # flake8-quotes
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
    "ERA", # flake8-eradicate
]
extend-select = [
    "ANN001", #  type annotation for function argument
    "ANN201", #  return type annonation public function
    "ANN205", #  return type annonation static method
    "ANN401", #  any type annotation
    "BLE001", #  blind exception
    "D107",   #  missing docstring in __init__
    "D417",   #  undocumented-parameter
]
ignore = [
    "N999",   #  invalid module name
    "COM812", #  missing-trailing-comma (conflict with formatter)
    "SIM108", #  if-else-block-instead-of-if-exp
    "A005",   #  stdlib-module-shadowing
]

[tool.ruff.lint.isort]
force-single-line = false
split-on-trailing-comma = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = false

[tool.typos.default]
locale = "en-us"
check-filename = false
extend-ignore-re = [
    "(?Rm)^.*(#|//)\\s*noqa:\\s*typos", # "# noqa: typos" to ignore typos
]

[tool.typos.default.extend-words]
Reson = "Reson"   # required for Proc. Intl. Soc. Mag. Reson. Med.
iy = "iy"
arange = "arange" # torch.arange
Ba = "Ba"
wht = "wht"       # Brainweb tissue class

[tool.typos.files]
extend-exclude = [
    "examples/*.ipynb",
] # don't check notebooks because py files have already been checked

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
disable_warnings = ["module-not-measured"]
